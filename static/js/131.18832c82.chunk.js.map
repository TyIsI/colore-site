{"version":3,"file":"static/js/131.18832c82.chunk.js","mappings":"qKACA,MAAuB,mB,SCEjBA,EAAO,kBACX,iBAAKC,UAAWC,EAAhB,WACE,yBAAI,iBAAMD,UAAU,cAAcE,GAAG,oBAAjC,kCACJ,uIAGA,4NAKA,yBAAI,iBAAMF,UAAU,cAAcE,GAAG,eAAjC,+BACJ,2BACE,yBACE,mDAEF,yBACE,gEAEF,yBACE,8CAEF,yBACE,oDAEF,yBACE,mDAEF,2BACE,mDADF,WAIF,yBAAI,iBAAMF,UAAU,cAAcE,GAAG,WAAjC,yBACJ,yBACE,4DACE,2BACE,6GAGA,qHAGA,gHAGA,oJAON,yBACE,qLAKF,yBACE,kEAEE,2BACE,sHAGA,6EAGA,kFAYVH,EAAKI,aAAe,GAEpB","sources":["webpack://colore.github.io/./src/pages/Home/Home.module.scss?ce6f","pages/Home/Home.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Home\":\"Home_Home__UmXXt\"};","// import PropTypes from 'prop-types'\nimport styles from './Home.module.scss'\n\nconst Home = () => (\n  <div className={styles.Home}>\n    <h2><span className=\"mw-headline\" id=\"What_is_Colore.3F\"> What is Colore? </span></h2>\n    <p>\n      Colore provides a best of both world solution to the If-Else-versus-Objected-Oriented-Programming dilemma.\n    </p>\n    <p>\n      Colore does so by providing a language-independent configurable dynamic way of mapping If-Else decision trees\n      through\n      metadata and acts as an agent to execute the relevant logic to a request.\n    </p>\n    <h2><span className=\"mw-headline\" id=\"Key_Features\"> Key Features </span></h2>\n    <ul>\n      <li>\n        <b>language-independent</b>\n      </li>\n      <li>\n        <b>dynamically/run-time configurable</b>\n      </li>\n      <li>\n        <b>Aspect-Oriented</b>\n      </li>\n      <li>\n        <b>Separation-of-Concern</b>\n      </li>\n      <li>\n        <b>Inversion-of-Control</b>\n      </li>\n      <li>\n        <b>Chain-of-Responsibility</b>.\n      </li>\n    </ul>\n    <h2><span className=\"mw-headline\" id=\"Benefits\">Benefits</span></h2>\n    <ul>\n      <li> Colore enables developers to:\n        <ul>\n          <li>\n            dynamically model applications independent of the actual execution environment.\n          </li>\n          <li>\n            easily re-use code, implement separation of concern and optimize application execution,\n          </li>\n          <li>\n            by using meta-data to separate application workflow logic from the business logic,\n          </li>\n          <li>\n            and provide a means to more easily implement different output mechanisms without changes in application\n            logic.\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <ul>\n      <li>\n        Colore applies a procedural model to Object-Oriented-Programming, by modeling the individual processing flows\n        on a request/event-handler-based model.\n      </li>\n    </ul>\n    <ul>\n      <li>\n        Colore was built on the concepts of:\n        <ul>\n          <li>\n            Intelligent mapping/discovery of the Context of the request to be handled by the engine,\n          </li>\n          <li>\n            Execute the relevant Logic based on the Context\n          </li>\n          <li>\n            Rendering output based on request Context\n          </li>\n        </ul>\n      </li>\n    </ul>\n\n  </div>\n)\n\nHome.propTypes = {}\n\nHome.defaultProps = {}\n\nexport default Home\n"],"names":["Home","className","styles","id","defaultProps"],"sourceRoot":""}